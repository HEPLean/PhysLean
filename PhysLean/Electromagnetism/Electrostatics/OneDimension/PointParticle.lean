/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import PhysLean.Electromagnetism.Electrostatics.Basic
import PhysLean.Mathematics.Distribution.PowMul
/-!

# A electrostatics of a point particle in 1d.

In this module we study the electrostatics of a point particle of charge `q`
sitting at the origin of 1d space.

-/

namespace Electromagnetism
open Distribution SchwartzMap

namespace OneDimPointParticle
open Space StaticElectricField MeasureTheory
noncomputable section

/-- The charge distribution of a point particle of charge `q` in 1d space sitting at the origin.
  Mathematically, this corresponds to a dirac delta distribution centered at the origin. -/
def chargeDistribution (q : ‚Ñù) : ChargeDistribution 1 := q ‚Ä¢ diracDelta ‚Ñù 0

/-- An electric potential of a charge distribution of a point particle. Mathematically
  this corresponds to the distribution formed by the function `|x|` multiplied by a
  scalar. -/
def electricPotential (q Œµ : ‚Ñù) : StaticElectricPotential 1 :=
  - Distribution.ofFunction (fun x => (q/(2 * Œµ)) ‚Ä¢ ‚Äñx‚Äñ)
  (by
    apply IsDistBounded.const_smul
    convert IsDistBounded.pow (n := 1) (by simp)
    simp)
  (by fun_prop)

@[simp]
lemma electricPotential_eq_zero_of_Œµ_eq_zero (q : ‚Ñù) :
    electricPotential q 0 = 0 := by
  ext x
  simp [electricPotential]

/-- An electric field corresponding to a charge distribution of a point particle,
  defined as the negative of the gradient of `electricPotential q Œµ`.

  This is the electric field which is symmetric about the origin, and in this sense
  does not sit in a constant electric field.
-/
def electricField (q Œµ : ‚Ñù) : StaticElectricField 1 := - Space.gradD (electricPotential q Œµ)

@[simp]
lemma electricField_eq_zero_of_Œµ_eq_zero (q : ‚Ñù) :
    electricField q 0 = 0 := by
  simp [electricField]

/-- The electric field `electricField q Œµ` is related to the `heavisideStep` function. -/
lemma electricField_eq_heavisideStep (q Œµ : ‚Ñù) :
    (electricField q Œµ) = ((q/Œµ) ‚Ä¢ ((heavisideStep 0).smulRight (basis 0) -
    (1/(2 : ‚Ñù)) ‚Ä¢ constD 1 (basis 0))) := by
  /- Some preamble for results which are used throughout this proof. -/
  let s : Set (EuclideanSpace ‚Ñù (Fin 1)) :=
    {x : EuclideanSpace ‚Ñù (Fin 1) | 0 < x (Fin.last 0)}
  have hs : NullMeasurableSet s volume := by
    simp [s]
    refine nullMeasurableSet_lt ?_ ?_
    ¬∑ fun_prop
    ¬∑ change AEMeasurable oneEquivCLE volume
      fun_prop
  /- We are showing equality of two distributions of the from
    `(Space 1) ‚Üíd[‚Ñù] EuclideanSpace ‚Ñù (Fin 1)`. Two such distributions `f` and `g` are equal
    if and only if for all Schwartz maps Œ∑ `‚ü™f, Œ∑‚ü´ 0 = ‚ü™g, Œ∑‚ü´ 0` -/
  ext Œ∑ i
  fin_cases i
  calc _
    /- `‚ü™E, Œ∑‚ü´ 0 = ‚ü™- ‚àá (- q/(2 * Œµ) |x|), Œ∑‚ü´ 0`-/
    _ = - Space.gradD (electricPotential q Œµ) Œ∑ 0 := by rw [electricField]; rfl
    /- By the definition of the gradiant on distributions
      `-‚ü™‚àá (- q/(2 * Œµ) |x|), Œ∑‚ü´ 0 = - ‚ü™(-q/(2 * Œµ) |x|), -dŒ∑/dx‚ü´`
      which is equal to `- ‚ü™(q/(2 * Œµ) |x|), dŒ∑/dx‚ü´`.
      By definition of `(q/(2 * Œµ) |x|)` as a distribution this is equal to
      `- ‚à´ x, dŒ∑/dx ‚Ä¢ (q/(2 * Œµ) |x|)`.
    -/
    _ = - (‚à´ x, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ (q/(2 *Œµ)) ‚Ä¢ ‚Äñx‚Äñ) := by
      simp only [Fin.isValue, gradD_eq_sum_basis,
        Finset.univ_unique, Fin.default_eq_zero, neg_smul, Finset.sum_neg_distrib,
        Finset.sum_singleton, PiLp.neg_apply, PiLp.smul_apply, basis_self, smul_eq_mul, mul_one,
        neg_neg]
      rw [electricPotential]
      simp only [Nat.succ_eq_add_one, Nat.reduceAdd, smul_eq_mul, Fin.isValue,
        ContinuousLinearMap.neg_apply, neg_inj]
      rw [ofFunction_apply]
      rfl
    /- Pulling out the scalar `q/(2 * Œµ)` gives
      `- ‚à´ x, dŒ∑/dx ‚Ä¢ (q/(2 * Œµ) |x|) = - q/(2 * Œµ) ‚à´ x, dŒ∑/dx ‚Ä¢ |x|`.
      With the bounds of the integral explicit this is
      `- q/(2 * Œµ) ‚à´_(-‚àû)^(‚àû) x, dŒ∑/dx ‚Ä¢ |x|`
    -/
    _ = - (q/(2 * Œµ)) * (‚à´ x, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ ‚Äñx‚Äñ) := by
      rw [‚Üê integral_const_mul, ‚Üê integral_neg]
      congr
      funext x
      simp only [Fin.isValue, smul_eq_mul, neg_mul, neg_inj]
      ring
    /- We split the integral
      `- q/(2 * Œµ) ‚à´_(-‚àû)^(‚àû) x, dŒ∑/dx ‚Ä¢ |x|`
      into two halfs
      `- q/(2 * Œµ) ‚à´_0^(‚àû) x, dŒ∑/dx ‚Ä¢ |x| - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, dŒ∑/dx ‚Ä¢ |x| `
    -/
    _ = - (q/(2 * Œµ)) * (‚à´ x in s, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ ‚Äñx‚Äñ) +
        - (q/(2 * Œµ)) * (‚à´ x in s·∂ú, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ ‚Äñx‚Äñ) := by
      rw [‚Üê integral_add_compl‚ÇÄ hs ?_]
      ¬∑ ring
      change Integrable (fun x : EuclideanSpace ‚Ñù (Fin 1) =>
        ((SchwartzMap.evalCLM (ùïú := ‚Ñù) (basis 0)) ((fderivCLM ‚Ñù) Œ∑)) x ‚Ä¢ ‚Äñx‚Äñ)
      apply IsDistBounded.schwartzMap_smul_integrable
      ¬∑ convert IsDistBounded.pow (n := 1) (by simp)
        simp
      ¬∑ fun_prop
    /- In the first of these integrals `|x|=x` whilst in the second `|x| = -x` giving
      us
      `- q/(2 * Œµ) ‚à´_0^(‚àû) x, dŒ∑/dx ‚Ä¢ x - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, dŒ∑/dx ‚Ä¢ (-x)` -/
    _ = - (q/(2 * Œµ)) * (‚à´ x in s, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ x 0) +
        - (q/(2 * Œµ)) * (‚à´ x in s·∂ú, fderiv ‚Ñù Œ∑ x (basis 0) ‚Ä¢ (- x 0)) := by
      congr 2
      ¬∑ refine setIntegral_congr_ae‚ÇÄ hs ?_
        filter_upwards with x hx
        congr
        rw [@PiLp.norm_eq_of_L2]
        simp only [Finset.univ_unique, Fin.default_eq_zero, Fin.isValue, Real.norm_eq_abs, sq_abs,
          Finset.sum_singleton]
        refine Real.sqrt_eq_cases.mpr ?_
        left
        apply And.intro
        ¬∑ exact Eq.symm (Lean.Grind.Semiring.pow_two (x 0))
        ¬∑ simp [s] at hx
          apply le_of_lt hx
      ¬∑ refine setIntegral_congr_ae‚ÇÄ ?_ ?_
        ¬∑ simpa using hs
        filter_upwards with x hx
        congr
        rw [@PiLp.norm_eq_of_L2]
        simp only [Finset.univ_unique, Fin.default_eq_zero, Fin.isValue, Real.norm_eq_abs, sq_abs,
          Finset.sum_singleton]
        refine Real.sqrt_eq_cases.mpr ?_
        left
        simp only [Fin.isValue, mul_neg, neg_mul, neg_neg, Left.nonneg_neg_iff]
        apply And.intro
        ¬∑ exact Eq.symm (Lean.Grind.Semiring.pow_two (x 0))
        ¬∑ simp [s] at hx
          exact hx
    /- The next couple of steps are setting things up to use the
      result `MeasureTheory.integral_Ioi_of_hasDerivAt_of_tendsto`. -/
    /- So far our integral has really being over `Space 1` we now transorm it
      into an integral over `‚Ñù`, using `oneEquivCLE`.
      Here `(Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)` is just `Œ∑` as
      a Schwartz map from `‚Ñù` rather then from `Space 1`.
      So symatically we have exactly the same thing as above
      `- q/(2 * Œµ) ‚à´_0^(‚àû) x, dŒ∑/dx ‚Ä¢ x - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, dŒ∑/dx ‚Ä¢ (-x)`
      exacpt `x` is now `‚Ñù` rather then `Space 1`.
        -/
    _ = - (q/(2 * Œµ)) * (‚à´ x in Set.Ioi (0 : ‚Ñù),
        deriv (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) x * x) +
        - (q/(2 * Œµ)) * (‚à´ x in Set.Iic (0 : ‚Ñù),
        deriv (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) x * (-x)) := by
      rw [‚Üê oneEquiv_symm_measurePreserving.setIntegral_preimage_emb
        (oneEquiv_symm_measurableEmbedding)]
      rw [‚Üê oneEquiv_symm_measurePreserving.setIntegral_preimage_emb
        (oneEquiv_symm_measurableEmbedding)]
      congr 3
      ¬∑ simp only [Fin.isValue, smul_eq_mul, compCLMOfContinuousLinearEquiv_apply]
        funext x
        congr 1
        rw [‚Üê fderiv_deriv]
        rw [ContinuousLinearEquiv.comp_right_fderiv]
        simp only [Fin.isValue, ContinuousLinearMap.coe_comp', ContinuousLinearEquiv.coe_coe,
          Function.comp_apply]
        congr 1
        funext i
        fin_cases i
        simp only [Fin.isValue, Fin.zero_eta, basis_self, oneEquivCLE]
        rfl
      ¬∑ congr
        simp only [Fin.reduceLast, Fin.isValue, Set.preimage_compl, Set.preimage_setOf_eq, s]
        ext x
        simp [oneEquiv_symm_apply]
      ¬∑ simp only [Fin.isValue, smul_eq_mul, mul_neg, compCLMOfContinuousLinearEquiv_apply]
        funext x
        congr 1
        rw [‚Üê fderiv_deriv]
        rw [ContinuousLinearEquiv.comp_right_fderiv]
        simp only [Fin.isValue, ContinuousLinearMap.coe_comp', ContinuousLinearEquiv.coe_coe,
          Function.comp_apply]
        congr 2
        funext i
        fin_cases i
        simp only [Fin.isValue, Fin.zero_eta, basis_self, oneEquivCLE]
        rfl
    /- We use the fact that e.g. `(d(Œ∑ ‚Ä¢ x)/dx - Œ∑ x) = d Œ∑/dx ‚Ä¢ x` to rewrite
    `- q/(2 * Œµ) ‚à´_0^(‚àû) x, dŒ∑/dx ‚Ä¢ x - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, dŒ∑/dx ‚Ä¢ (-x)`
    as
    `- q/(2 * Œµ) ‚à´_0^(‚àû) x, (d(Œ∑ ‚Ä¢ x)/dx - Œ∑ x) - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, (d(Œ∑ ‚Ä¢ (-x))/dx + Œ∑ x)` -/
    _ = - (q/(2 * Œµ)) * (‚à´ x in Set.Ioi (0 : ‚Ñù),
        deriv (fun x => Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x * (fun x => x) x) x
        - Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) * (‚à´ x in Set.Iic (0 : ‚Ñù),
        deriv (fun x => Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x * (fun x => - x) x) x
        + Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      congr
      ¬∑ funext x
        rw [deriv_fun_mul]
        simp only [compCLMOfContinuousLinearEquiv_apply, Function.comp_apply, deriv_id'', mul_one,
          add_sub_cancel_right]
        ¬∑ exact SchwartzMap.differentiableAt _
        ¬∑ fun_prop
      ¬∑ funext x
        rw [deriv_fun_mul]
        simp only [compCLMOfContinuousLinearEquiv_apply, mul_neg, Function.comp_apply, deriv_neg'',
          mul_one, neg_add_cancel_right]
        ¬∑ exact SchwartzMap.differentiableAt _
        ¬∑ fun_prop
    /- By definition of `powOneMul` we rewrite `Œ∑ ‚Ä¢ x` using `powOneMul`. Symatically we now have
      `- q/(2 * Œµ) ‚à´_0^(‚àû) x, (d(Œ∑ ‚Ä¢ x)/dx - Œ∑ x) - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, (d(- (Œ∑ ‚Ä¢ x)))/dx + Œ∑ x)`
      things are just written in different ways. -/
    _ = - (q/(2 * Œµ)) * (‚à´ x in Set.Ioi (0 : ‚Ñù),
        deriv (powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) x
        - Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) * (‚à´ x in Set.Iic (0 : ‚Ñù),
        deriv (-powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) x
        + Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      congr
      ¬∑ funext x
        congr
        funext x
        simp [powOneMul_apply]
        rw [mul_comm]
      ¬∑ funext x
        congr
        funext x
        change _ = - ((powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)) x
        simp [powOneMul_apply]
        rw [mul_comm]
    /- We seperate the integrals to get
      `- q/(2 * Œµ) (‚à´_0^(‚àû) x, d(Œ∑ ‚Ä¢ x)/dx - ‚à´_0^(‚àû) x, Œ∑ x) `
      `- q/(2 * Œµ) (‚à´_(-‚àû)^0 x, d(- (Œ∑ ‚Ä¢ x)))/dx + ‚à´_(-‚àû)^0 x, Œ∑ x)`. -/
    _ = - (q/(2 * Œµ)) * ((‚à´ x in Set.Ioi (0 : ‚Ñù),
        deriv (powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) x)
        - ‚à´ x in Set.Ioi (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) * ((‚à´ x in Set.Iic (0 : ‚Ñù),
        deriv (-powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) x)
        + ‚à´ x in Set.Iic (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      rw [integral_sub, integral_add]
      ¬∑ refine Integrable.restrict ?_
        change Integrable (derivCLM ‚Ñù
          (-(powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑))) volume
        exact integrable
            ((derivCLM ‚Ñù) (-(powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)))
      ¬∑ refine Integrable.restrict ?_
        exact integrable _
      ¬∑ refine Integrable.restrict ?_
        change Integrable (derivCLM ‚Ñù
          (powOneMul ‚Ñù ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑))) volume
        exact integrable
            ((derivCLM ‚Ñù) (powOneMul ‚Ñù ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)))
      ¬∑ refine Integrable.restrict ?_
        exact integrable _
    /- We are now in a position to use `MeasureTheory.integral_Ioi_of_hasDerivAt_of_tendsto`
      which rewrites `‚à´_0^(‚àû) x, d(Œ∑ ‚Ä¢ x)/dx = 0 - (Œ∑ 0 ‚Ä¢ 0)`
      and `‚à´_(-‚àû)^0 x, d(- (Œ∑ ‚Ä¢ x)))/dx = (- Œ∑ 0 ‚Ä¢ 0) - 0`. This gives us
      `- q/(2 * Œµ) ((0 - (Œ∑ 0 ‚Ä¢ 0))- ‚à´_0^(‚àû) x, Œ∑ x)`
      `- q/(2 * Œµ) (((- Œ∑ 0 ‚Ä¢ 0) - 0)+ ‚à´_(-‚àû)^0 x, Œ∑ x)`. -/
    _ = - (q/(2 * Œµ)) * ((0 -
        (powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) 0)
        - ‚à´ x in Set.Ioi (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) *
        (((-powOneMul ‚Ñù (Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm)) 0 - 0)
        + ‚à´ x in Set.Iic (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      congr
      ¬∑ apply MeasureTheory.integral_Ioi_of_hasDerivAt_of_tendsto
        ¬∑ apply Continuous.continuousWithinAt
          fun_prop
        ¬∑ intro x hx
          refine DifferentiableAt.hasDerivAt ?_
          exact SchwartzMap.differentiableAt _
        ¬∑ apply Integrable.integrableOn
          change Integrable (derivCLM ‚Ñù ((powOneMul ‚Ñù)
            ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑))) volume
          exact integrable
            ((derivCLM ‚Ñù) ((powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)))
        ¬∑ exact Filter.Tendsto.mono_left ((powOneMul ‚Ñù)
            ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)).toZeroAtInfty.zero_at_infty'
            atTop_le_cocompact
      ¬∑ apply MeasureTheory.integral_Iic_of_hasDerivAt_of_tendsto
        ¬∑ apply Continuous.continuousWithinAt
          fun_prop
        ¬∑ intro x hx
          refine DifferentiableAt.hasDerivAt ?_
          exact SchwartzMap.differentiableAt _
        ¬∑ apply Integrable.integrableOn
          change Integrable (derivCLM ‚Ñù (- (powOneMul ‚Ñù)
            ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)))
          exact integrable
            ((derivCLM ‚Ñù) (- (powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)))
        ¬∑ apply Filter.Tendsto.mono_left
            ((- (powOneMul ‚Ñù)
            ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)).toZeroAtInfty.zero_at_infty')
          exact atBot_le_cocompact
    /- We simplify the `(Œ∑ 0 ‚Ä¢ 0)` and `(- Œ∑ 0 ‚Ä¢ 0)` terms to be `0`. Giving us
    `- q/(2 * Œµ) ((0 - 0)- ‚à´_0^(‚àû) x, Œ∑ x)`
    `- q/(2 * Œµ) ((0 - 0)+ ‚à´_(-‚àû)^0 x, Œ∑ x)`. -/
    _ = - (q/(2 * Œµ)) * ((0 - 0)
        - ‚à´ x in Set.Ioi (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) * ((0 - 0)
        + ‚à´ x in Set.Iic (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      congr
      ¬∑ simp [powOneMul_apply]
      ¬∑ change - ((powOneMul ‚Ñù) ((compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm) Œ∑)) 0 = 0
        simp [powOneMul_apply]
    /- Simplifying further gives
    `q/(2 * Œµ) ‚à´_0^(‚àû) x, Œ∑ x + - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, Œ∑ x)`. -/
    _ = (q/(2 * Œµ)) *
        (‚à´ x in Set.Ioi (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) +
        - (q/(2 * Œµ)) *
          (‚à´ x in Set.Iic (0 : ‚Ñù), Œ∑.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm x) := by
      simp
    /- We now turn back to integrals over `Space 1` instead of integrals over `x`.
    Schematically the integral remains the same.
    `q/(2 * Œµ) ‚à´_0^(‚àû) x, Œ∑ x + - q/(2 * Œµ) ‚à´_(-‚àû)^0 x, Œ∑ x)`. -/
    _ = (q/(2 * Œµ)) * (‚à´ x in s, Œ∑ x) + - (q/(2 * Œµ)) * (‚à´ x in s·∂ú, Œ∑ x) := by
      rw [‚Üê oneEquiv_symm_measurePreserving.setIntegral_preimage_emb
        (oneEquiv_symm_measurableEmbedding)]
      rw [‚Üê oneEquiv_symm_measurePreserving.setIntegral_preimage_emb
        (oneEquiv_symm_measurableEmbedding)]
      congr
      ext x
      simp [oneEquiv_symm_apply, s]
    /- We rewrite the second integral `‚à´_(-‚àû)^0 = ‚à´_(-‚àû)^‚àû - ‚à´_0^‚àû` to give
    `q/(2 * Œµ) ‚à´_0^(‚àû) x, Œ∑ x + - q/(2 * Œµ) (‚à´_(-‚àû)^‚àû x, Œ∑ x - ‚à´_0^‚àû x, Œ∑ x)`. -/
    _ = (q/(2 * Œµ)) * (‚à´ x in s, Œ∑ x) + - (q/(2 * Œµ)) * ((‚à´ x, Œ∑ x) - ‚à´ x in s, Œ∑ x) := by
      congr 2
      rw [‚Üê integral_add_compl‚ÇÄ hs]
      ¬∑ ring
      exact integrable Œ∑
    /- Simplifying we get:
    `q/(Œµ) ‚à´_0^(‚àû) x, Œ∑ x + - q/(2 * Œµ) ‚à´_(-‚àû)^‚àû x, Œ∑ x`. -/
    _ = (q/(Œµ)) * (‚à´ x in s, Œ∑ x) + - (q/(2 * Œµ)) * (‚à´ x, Œ∑ x) := by
      ring
  /- Both sides are now essentially equal, by the definition of the heaviside step,
    and the constant distribution. What is left is some small tidying up. -/
  simp [mul_sub]
  congr 2
  rw [‚Üê mul_assoc]
  congr 1
  ring
  simp [constD, const_apply]
  rw [integral_smul_const]
  simp

/-- The electric field `electricField q Œµ` corresponding to a charge distribution of a point
  particle satisfies Gauss's law for the charge distribution of the point particle.
-/
lemma gaussLaw (q Œµ : ‚Ñù) : (electricField q Œµ).GaussLaw Œµ (chargeDistribution q) := by
  by_cases h : Œµ = 0
  ¬∑ subst h
    simp [GaussLaw]
  rw [gaussLaw_iff]
  ext Œ∑
  rw [electricField_eq_heavisideStep, chargeDistribution]
  change (divD ((q / Œµ) ‚Ä¢ (ContinuousLinearMap.smulRight (heavisideStep 0) (basis 0) -
    (1 / 2) ‚Ä¢ constD 1 (basis 0)))) Œ∑ =
    ((1 / Œµ) ‚Ä¢ q ‚Ä¢ diracDelta ‚Ñù 0) Œ∑
  haveI : SMulZeroClass ‚Ñù ((Space 1)‚Üíd[‚Ñù] ‚Ñù) := by infer_instance
  simp only [Nat.succ_eq_add_one, Nat.reduceAdd, Fin.isValue, one_div, map_smul, map_sub,
    divD_constD, ContinuousLinearMap.coe_smul', ContinuousLinearMap.coe_sub', Pi.smul_apply,
    Pi.sub_apply, ContinuousLinearMap.zero_apply, smul_eq_mul, mul_zero, sub_zero, diracDelta_apply]
  field_simp
  congr 1
  rw [divD_apply_eq_sum_fderivD]
  simp only [Finset.univ_unique, Fin.default_eq_zero, Fin.isValue, Finset.sum_singleton]
  rw [fderivD_apply]
  simp only [Fin.isValue, ContinuousLinearMap.smulRight_apply, PiLp.neg_apply, PiLp.smul_apply,
    basis_self, smul_eq_mul, mul_one]
  rw [heavisideStep_apply]
  simp only [Nat.succ_eq_add_one, Nat.reduceAdd, Fin.reduceLast, Fin.isValue]
  rw [‚Üê MeasureTheory.MeasurePreserving.setIntegral_preimage_emb
    (Œº := volume) (ŒΩ := volume) (f := oneEquiv.symm)]
  simp only [Fin.isValue, Set.preimage_setOf_eq]
  let f' := SchwartzMap.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm
    ((SchwartzMap.evalCLM (ùïú := ‚Ñù) (basis 0)) ((fderivCLM ‚Ñù) Œ∑))
  let f := SchwartzMap.compCLMOfContinuousLinearEquiv ‚Ñù oneEquivCLE.symm Œ∑
  change -‚à´ (x : ‚Ñù) in Set.Ioi 0, f' x = _
  rw [neg_eq_iff_eq_neg]
  trans 0 - f 0
  ¬∑ apply MeasureTheory.integral_Ioi_of_hasDerivAt_of_tendsto
      (f' := f')
      (f := f)
    ¬∑ apply Continuous.continuousWithinAt
      fun_prop
    ¬∑ have hf : f' = (SchwartzMap.derivCLM ‚Ñù) f := by
        ext x
        simp [f']
        change fderiv ‚Ñù Œ∑ (oneEquivCLE.symm x) (basis 0) = _
        trans fderiv ‚Ñù Œ∑ (oneEquivCLE.symm x) (oneEquivCLE.symm 1)
        ¬∑ congr 1
          funext i
          fin_cases i
          simp
          rfl
        rw [‚Üê fderiv_deriv]
        dsimp [f]
        rw [ContinuousLinearEquiv.comp_right_fderiv]
        rfl
      rw [hf]
      simpa using fun x hx => SchwartzMap.differentiableAt f
    ¬∑ exact (integrable f').integrableOn
    ¬∑ exact Filter.Tendsto.mono_left f.toZeroAtInfty.zero_at_infty' atTop_le_cocompact
  ¬∑ simp [f]
  ¬∑ exact oneEquiv_symm_measurePreserving
  ¬∑ exact oneEquiv_symm_measurableEmbedding

/-- For the charge distribution of a point particle in 1-dimension, a static electric field
  satifies Gauss's law if and only if it is the linear combination of the
  electric field `electricField q Œµ` (corresponding to the symmetric step function), plus
  a constant electric field.

  The `if` direction of this result is easy to prove, whilst the `only if` direction
  is difficult.

  Note: This result follows from the (as yet unproven) analgous result for the
  vacuum.
-/
@[sorryful]
lemma gaussLaw_iff (q Œµ : ‚Ñù) (E : StaticElectricField 1) :
    E.GaussLaw Œµ (chargeDistribution q) ‚Üî ‚àÉ m, E = electricField q Œµ + constD 1 m := by
  sorry

end
end OneDimPointParticle

end Electromagnetism
