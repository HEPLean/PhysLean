/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import PhysLean.Mathematics.Distribution.Function.IsDistBounded
import PhysLean.SpaceAndTime.Space.Basic
import PhysLean.SpaceAndTime.Time.Basic
import Mathlib.Tactic.Cases

open SchwartzMap NNReal
noncomputable section

variable (ùïú : Type) {E F F' : Type} [RCLike ùïú] [NormedAddCommGroup E] [NormedAddCommGroup F]
  [NormedAddCommGroup F']

namespace Distribution

variable [NormedSpace ‚Ñù E]

open MeasureTheory
/-!

## A. Product of tempered measures

-/

instance {D1 : Type} [NormedAddCommGroup D1] [MeasurableSpace D1]
    {D2 : Type} [NormedAddCommGroup D2] [MeasurableSpace D2]
    (Œº1 : Measure D1) (Œº2 : Measure D2)
    [Measure.HasTemperateGrowth Œº1] [Measure.HasTemperateGrowth Œº2]
    [OpensMeasurableSpace (D1 √ó D2)] :
    Measure.HasTemperateGrowth (Œº1.prod Œº2) where
  exists_integrable := by
    obtain ‚ü®rt1, h1‚ü© := Measure.HasTemperateGrowth.exists_integrable (Œº := Œº1)
    obtain ‚ü®rt2, h2‚ü© := Measure.HasTemperateGrowth.exists_integrable (Œº := Œº2)
    use rt1 + rt2
    apply Integrable.mono' (h1.mul_prod h2)
    ¬∑ generalize rt1 + rt2 = r
      apply Continuous.aestronglyMeasurable
      simp
      apply Continuous.inv‚ÇÄ
      apply Continuous.pow
      fun_prop
      intro x
      positivity
    filter_upwards with x
    simp
    calc _
      _ = |(1 + ‚Äñx‚Äñ) ^ (-(rt1 : ‚Ñù))  * (1 + ‚Äñx‚Äñ) ^ (-(rt2 : ‚Ñù))| := by
        rw [Real.rpow_add (by positivity), mul_comm]
      _ = (1 + ‚Äñx‚Äñ) ^ (-(rt1 : ‚Ñù))  * (1 + ‚Äñx‚Äñ) ^ (-(rt2 : ‚Ñù)) := by
        rw [abs_of_nonneg (by positivity)]
    simp
    apply mul_le_mul _ _ (by positivity) (by positivity)
    ¬∑ refine inv_anti‚ÇÄ (by positivity) (pow_le_pow_left‚ÇÄ (by positivity) ?_ rt1)
      match x with
      | (x1, x2) =>
        simp
    ¬∑ refine inv_anti‚ÇÄ (by positivity) (pow_le_pow_left‚ÇÄ (by positivity) ?_ rt2)
      match x with
      | (x1, x2) =>
        simp

namespace IsDistBounded

@[fun_prop]
lemma time_schwartzMap_mul_aestronglyMeasurable  {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(Time √ó Space dm1.succ, ‚Ñù)}
    {f : Space dm1.succ ‚Üí F}
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    AEStronglyMeasurable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñf x.2‚Äñ) (volume.prod volume) := by
  refine Continuous.comp_aestronglyMeasurable‚ÇÇ (by fun_prop) ?_ ?_
  ¬∑ fun_prop
  ¬∑ apply MeasureTheory.AEStronglyMeasurable.norm
    apply MeasureTheory.AEStronglyMeasurable.comp_snd
    fun_prop

@[fun_prop]
lemma time_schwartzMap_smul_aestronglyMeasurable  {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(Time √ó Space dm1.succ, ‚Ñù)}
    {f : Space dm1.succ ‚Üí F} [NormedSpace ‚Ñù F]
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    AEStronglyMeasurable (fun x => Œ∑ x ‚Ä¢ f x.2) (volume.prod volume) := by
  apply AEStronglyMeasurable.smul
  ¬∑ fun_prop
  ¬∑ apply MeasureTheory.AEStronglyMeasurable.comp_snd
    fun_prop

lemma time_schwartzMap_mul_pow_integrable {dm1 : ‚Ñï}
    (Œ∑ : ùì¢(Time √ó Space dm1.succ, ‚Ñù))
    (p : ‚Ñ§) (hp : - (dm1 : ‚Ñ§) ‚â§ p) :
    Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñx.2‚Äñ ^ p) (volume.prod volume) := by
  by_cases hp : p = 0
  ¬∑ subst hp
    simp only [Nat.succ_eq_add_one, zpow_zero, mul_one]
    apply Integrable.norm
    exact Œ∑.integrable
  suffices h1 : Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñx.2‚Äñ ^ (p + dm1)) (
      volume.prod (invPowMeasure (dm1 := dm1))) by
    rw [invPowMeasure, MeasureTheory.prod_withDensity_right] at h1
    erw [integrable_withDensity_iff_integrable_smul‚ÇÄ (by fun_prop)] at h1
    convert h1 using 1
    funext x
    simp only [Nat.succ_eq_add_one, Real.norm_eq_abs, one_div]
    rw [Real.toNNReal_of_nonneg, NNReal.smul_def]
    simp only [inv_nonneg, norm_nonneg, pow_nonneg, coe_mk, smul_eq_mul]
    ring_nf
    rw [mul_assoc]
    congr
    have hx : 0 ‚â§ ‚Äñx.2‚Äñ := norm_nonneg x.2
    generalize ‚Äñx.2‚Äñ = r at *
    by_cases hr : r = 0
    ¬∑ subst hr
      simp only [inv_zero]
      rw [zero_pow_eq, zero_zpow_eq, zero_zpow_eq]
      split_ifs <;> simp
      any_goals omega
    ¬∑ simp only [inv_pow]
      field_simp
      rw [zpow_add‚ÇÄ hr]
      simp
    ¬∑ simp
    ¬∑ fun_prop
  apply Integrable.mono' (integrable_pow_mul_iteratedFDeriv _ Œ∑ (p + dm1).toNat 0)
  ¬∑ apply Continuous.aestronglyMeasurable
    apply Continuous.mul
    ¬∑ exact Œ∑.continuous.norm
    ¬∑ apply Continuous.zpow‚ÇÄ
      ¬∑ fun_prop
      ¬∑ intro x
        right
        omega
  filter_upwards with x
  simp only [Nat.succ_eq_add_one, Real.norm_eq_abs, norm_iteratedFDeriv_zero]
  rw [mul_comm]
  rw [‚Üê zpow_natCast]
  rw [abs_of_nonneg (by positivity)]
  apply mul_le_mul _ (by rfl) (by positivity) (by positivity)
  rw [zpow_natCast]
  trans ‚Äñx.2‚Äñ ^ ((p + dm1).toNat : ‚Ñ§)
  ¬∑ apply le_of_eq
    congr
    refine Int.eq_natCast_toNat.mpr (by omega)
  rw [zpow_natCast]
  simp
  apply pow_le_pow_left‚ÇÄ (by positivity) _ ((p + ‚Üëdm1).toNat)
  match x with
  | (x1, x2) =>
    simp


lemma time_schwartzMap_mul_integrable_norm {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(Time √ó Space dm1.succ, ‚Ñù)}
    {f : Space dm1.succ ‚Üí F}
    (hf : IsDistBounded f)
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñf x.2‚Äñ) (volume.prod volume) := by
  rcases hf with ‚ü®n, c, g, p, c_nonneg, p_bound, hbound‚ü©
  apply Integrable.mono' (g := fun x => ‚àë i, ‚ÄñŒ∑ x‚Äñ * (c i * ‚Äñx.2 + g i‚Äñ ^ p i)) _
  ¬∑ fun_prop
  ¬∑ filter_upwards with x
    rw [‚Üê Finset.mul_sum]
    simp
    exact mul_le_mul (by rfl) (hbound x.2) (norm_nonneg _) (abs_nonneg _)
  ¬∑ apply MeasureTheory.integrable_finset_sum
    intro i _
    conv =>
      enter [1, x]
      rw [‚Üê mul_assoc, mul_comm _ (c i), mul_assoc]
    apply Integrable.const_mul
    suffices h1 : Integrable (fun x => ‚ÄñŒ∑ ((x + (0,g i)) - (0,g i))‚Äñ * ‚Äñx.2+ g i‚Äñ ^ p i) (volume.prod volume) by
      convert h1 using 1
      simp
    apply MeasureTheory.Integrable.comp_add_right (g := (0,g i))
      (f := fun x => ‚ÄñŒ∑ (x - (0,g i))‚Äñ * ‚Äñx.2‚Äñ ^ p i)
    let Œ∑' := SchwartzMap.compCLM (ùïú := ‚Ñù)
      (g := fun x => x - (0,g i))
      (by
        apply Function.HasTemperateGrowth.of_fderiv (k := 1) (C := 1 + ‚Äñg i‚Äñ)
        ¬∑ have hx : (fderiv ‚Ñù (fun x : Time √ó Space dm1.succ => x - (0,g i))) =
              fun _ => ContinuousLinearMap.id ‚Ñù (Time √ó Space dm1.succ) := by
            funext x
            simp only [Nat.succ_eq_add_one]
            erw [fderiv_sub]
            simp only [fderiv_id', fderiv_fun_const, Pi.zero_apply, sub_zero]
            fun_prop
            fun_prop
          rw [hx]
          exact Function.HasTemperateGrowth.const _
        ¬∑ fun_prop
        ¬∑ intro x
          simp only [Nat.succ_eq_add_one, pow_one]
          trans ‚Äñx‚Äñ + ‚Äñ((0, g i) : Time √ó Space dm1.succ)‚Äñ
          ¬∑ apply norm_sub_le
          simp [mul_add, add_mul]
          trans 1 + (‚Äñx‚Äñ + ‚Äñg i‚Äñ)
          ¬∑ simp
          trans (1 + (‚Äñx‚Äñ + ‚Äñg i‚Äñ)) + ‚Äñx‚Äñ * ‚Äñg i‚Äñ
          ¬∑ simp
            positivity
          ring_nf
          rfl) (by
          simp only [Nat.succ_eq_add_one]
          use 1, (1 + ‚Äñ((0, g i) : Time √ó Space dm1.succ)‚Äñ)
          intro x
          simp only [Nat.succ_eq_add_one, pow_one]
          apply (norm_le_norm_add_norm_sub' x (0, g i)).trans
          trans 1 + (‚Äñ((0, g i) : Time √ó Space dm1.succ)‚Äñ + ‚Äñx - (0, g i)‚Äñ)
          ¬∑ simp
          trans (1 + (‚Äñ((0, g i) : Time √ó Space dm1.succ)‚Äñ + ‚Äñx - (0, g i)‚Äñ)) + ‚Äñ((0, g i) : Time √ó Space dm1.succ)‚Äñ * ‚Äñx - (0, g i)‚Äñ
          ¬∑ simp
            positivity
          ring_nf
          rfl) Œ∑
    exact time_schwartzMap_mul_pow_integrable Œ∑' (p i) (p_bound i)

lemma time_schwartzMap_smul_integrable {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(Time √ó Space dm1.succ, ‚Ñù)}
    {f : Space dm1.succ ‚Üí F}
    (hf : IsDistBounded f) [NormedSpace ‚Ñù F]
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    Integrable (fun x => Œ∑ x ‚Ä¢ f x.2) (volume.prod volume) := by
  rw [‚Üê MeasureTheory.integrable_norm_iff]
  convert hf.time_schwartzMap_mul_integrable_norm (Œ∑ := Œ∑) hae using 1
  funext x
  simp [norm_smul]
  fun_prop


end IsDistBounded

end Distribution
