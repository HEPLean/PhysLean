/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import Mathlib.Data.Finset.Powerset
import Mathlib.Data.Finset.Prod
import Mathlib.Tactic.FinCases
import Mathlib.Tactic.DeriveFintype
import PhysLean.StringTheory.FTheory.SU5U1.Charges
/-!

# Potential of the SU(5) + U(1) GUT for F-Theory

This file contains properties of the potential terms of the `SU(5)` SUSY GUT with an
additional `U(1)` gauge group in F-theory.

The terms from the superpotential considered are (arXiv:0912.0853) :
`W ‚äÉ Œº 5Hu 5ÃÑHd + ùõΩ·µ¢ 5ÃÑM‚Å±5Hu + ùúÜ·µ¢‚±º‚Çñ 5ÃÑM‚Å± 5ÃÑM ≤ 10·µè + W¬π·µ¢‚±º‚Çñ‚Çó 10‚Å± 10 ≤ 10·µè 5ÃÑMÀ°`
`+ W¬≤·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 10·µè 5ÃÑHd + W¬≥·µ¢‚±º 5ÃÑM‚Å± 5ÃÑM ≤ 5Hu 5Hu + W‚Å¥·µ¢ 5ÃÑM‚Å± 5ÃÑHd 5Hu 5Hu`

The terms of the Kahler potential are (arXiv:0912.0853) :
`K ‚äÉ K¬π·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 5M·µè + K¬≤·µ¢ 5ÃÑHu 5ÃÑHd 10‚Å±`

## Important results

- `PotentialTerm` : The inductive type indexing the potential terms.
- `violateRParity` : The finite set of terms which violate R-parity.
  `Œ≤`, `Œª`, `W¬≤`, `W‚Å¥`, `K¬π`, `K¬≤`
- `causeProtonDecay` : The finite set of terms which contribute to proton decay.
  `W¬π`, `W¬≤`, `K¬π`, `Œª`
- `IsPresent`: The condition on the potential terms for them to be present
  based on the `U(1)` charges.

## Previous versions

A previous version of this code was replaced in PR #569.

-/

namespace FTheory

namespace SU5U1

variable {I : CodimensionOneConfig}

/-- Relevant terms part of the superpotential and Kahler potential of the `SU(5)` SUSY GUT. -/
inductive PotentialTerm
  /-- The term `Œº 5Hu 5ÃÑHd`. -/
  | Œº : PotentialTerm
  /-- The term `ùõΩ·µ¢ 5ÃÑM‚Å±5Hu`. -/
  | Œ≤ : PotentialTerm
  /-- The term `ùúÜ·µ¢‚±º‚Çñ 5ÃÑM‚Å± 5ÃÑM ≤ 10·µè`. -/
  | Œõ : PotentialTerm
  /-- The term `W¬π·µ¢‚±º‚Çñ‚Çó 10‚Å± 10 ≤ 10·µè 5ÃÑMÀ°` -/
  | W1 : PotentialTerm
  /-- The term `W¬≤·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 10·µè 5ÃÑHd`. -/
  | W2 : PotentialTerm
  /-- The term `W¬≥·µ¢‚±º 5ÃÑM‚Å± 5ÃÑM ≤ 5Hu 5Hu`. -/
  | W3 : PotentialTerm
  /-- The term `W‚Å¥·µ¢ 5ÃÑM‚Å± 5ÃÑHd 5Hu 5Hu`. -/
  | W4 : PotentialTerm
  /-- The term `K¬π·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 5M·µè`. -/
  | K1 : PotentialTerm
  /-- The term `K¬≤·µ¢ 5ÃÑHu 5ÃÑHd 10‚Å±` -/
  | K2 : PotentialTerm
  /-- The term `Œª·µó·µ¢‚±º 10‚Å± 10 ≤ 5Hu`. -/
  | topYukawa : PotentialTerm
  /-- The term `Œª·µá·µ¢‚±º 10‚Å± 5ÃÑM ≤ 5ÃÑHd`. -/
  | bottomYukawa : PotentialTerm
deriving DecidableEq, Fintype

namespace PotentialTerm

/-- The finite set of terms in the superpotential and Kahler potential which violate R-parity.
- `ùõΩ·µ¢ 5ÃÑM‚Å±5Hu`
- `ùúÜ·µ¢‚±º‚Çñ 5ÃÑM‚Å± 5ÃÑM ≤ 10·µè`
- `W¬≤·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 10·µè 5ÃÑHd`
- `W‚Å¥·µ¢ 5ÃÑM‚Å± 5ÃÑHd 5Hu 5Hu`
- `K¬π·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 5M·µè`
- `K¬≤·µ¢ 5ÃÑHu 5ÃÑHd 10‚Å±`
These correspond to the terms with an odd number of matter fields.
-/
def violateRParity : Finset PotentialTerm :=
  {Œ≤, Œõ, W2, W4, K1, K2}

/-- The finite set of terms in the superpotential and Kahler potential which are involved in
  proton decay.
- `W¬π·µ¢‚±º‚Çñ‚Çó 10‚Å± 10 ≤ 10·µè 5ÃÑMÀ°`
- `ùúÜ·µ¢‚±º‚Çñ 5ÃÑM‚Å± 5ÃÑM ≤ 10·µè`
- `W¬≤·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 10·µè 5ÃÑHd`
- `K¬π·µ¢‚±º‚Çñ 10‚Å± 10 ≤ 5M·µè`
-/
def causeProtonDecay : Finset PotentialTerm :=
  {W1, Œõ, W2, K1}

/-- The type of charges associated with the potential terms.
  The implicit order of the charges is: `qHd`, `qHu`, `Q5`, `Q10`.
  The types correspond to:
- `Œº` : `qHd √ó qHu`
- `Œ≤` : `qHu √ó Q5`
- `Œõ` : `Q5 √ó Q10`
- `W1` : `Q5 √ó Q10`
- `W2` : `qHd √ó Q10`
- `W3` : `qHu √ó Q5`
- `W4` : `qHd √ó qHu √ó Q5`
- `K1` : `Q5 √ó Q10`
- `K2` : `qHd √ó qHu √ó Q10`
- `topYukawa` : `qHu √ó Q10`
- `bottomYukawa` : `qHd √ó Q5 √ó Q10`
-/
def ChargeType : PotentialTerm ‚Üí Type
    /- qHd √ó qHu -/
  | Œº => Option ‚Ñ§ √ó Option ‚Ñ§
  /- qHu √ó Q5 -/
  | Œ≤ => Option ‚Ñ§ √ó Finset ‚Ñ§
  /- Q5 √ó Q10 -/
  | Œõ => Finset ‚Ñ§ √ó Finset ‚Ñ§
  /- Q5 √ó Q10 -/
  | W1 => Finset ‚Ñ§ √ó Finset ‚Ñ§
  /- qHd √ó Q10 -/
  | W2 => Option ‚Ñ§ √ó Finset ‚Ñ§
  /- qHu √ó Q5 -/
  | W3 => Option ‚Ñ§ √ó Finset ‚Ñ§
  /- qHd √ó qHu √ó Q5 -/
  | W4 =>Option ‚Ñ§ √ó Option ‚Ñ§ √ó Finset ‚Ñ§
  /- Q5 √ó Q10 -/
  | K1 => Finset ‚Ñ§ √ó Finset ‚Ñ§
  /- qHd √ó qHu √ó Q10 -/
  | K2 => Option ‚Ñ§ √ó Option ‚Ñ§ √ó Finset ‚Ñ§
  /- qHu √ó Q10 -/
  | topYukawa => Option ‚Ñ§ √ó Finset ‚Ñ§
  /- qHd √ó Q5 √ó Q10 -/
  | bottomYukawa => Option ‚Ñ§ √ó Finset ‚Ñ§ √ó Finset ‚Ñ§

instance : (T : PotentialTerm) ‚Üí DecidableEq T.ChargeType
  | Œº => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Option ‚Ñ§))
  | Œ≤ => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Finset ‚Ñ§))
  | Œõ => inferInstanceAs (DecidableEq (Finset ‚Ñ§ √ó Finset ‚Ñ§))
  | W1 => inferInstanceAs (DecidableEq (Finset ‚Ñ§ √ó Finset ‚Ñ§))
  | W2 => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Finset ‚Ñ§))
  | W3 => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Finset ‚Ñ§))
  | W4 => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Option ‚Ñ§ √ó Finset ‚Ñ§))
  | K1 => inferInstanceAs (DecidableEq (Finset ‚Ñ§ √ó Finset ‚Ñ§))
  | K2 => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Option ‚Ñ§ √ó Finset ‚Ñ§))
  | topYukawa => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Finset ‚Ñ§))
  | bottomYukawa => inferInstanceAs (DecidableEq (Option ‚Ñ§ √ó Finset ‚Ñ§ √ó Finset ‚Ñ§))

/-!

## Subset relation on `ChargeType`

-/

instance (T : PotentialTerm) : HasSubset T.ChargeType where Subset x y :=
  match T with
  | Œº => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2.toFinset ‚äÜ y.2.toFinset
  | Œ≤ => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2 ‚äÜ y.2
  | Œõ => x.1 ‚äÜ y.1 ‚àß x.2 ‚äÜ y.2
  | W1 => x.1 ‚äÜ y.1 ‚àß x.2 ‚äÜ y.2
  | W2 => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2 ‚äÜ y.2
  | W3 => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2 ‚äÜ y.2
  | W4 => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2.1.toFinset ‚äÜ y.2.1.toFinset ‚àß x.2.2 ‚äÜ y.2.2
  | K1 => x.1 ‚äÜ y.1 ‚àß x.2 ‚äÜ y.2
  | K2 => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2.1.toFinset ‚äÜ y.2.1.toFinset ‚àß x.2.2 ‚äÜ y.2.2
  | topYukawa => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2 ‚äÜ y.2
  | bottomYukawa => x.1.toFinset ‚äÜ y.1.toFinset ‚àß x.2.1 ‚äÜ y.2.1 ‚àß x.2.2 ‚äÜ y.2.2

instance subsetDecidable : (T : PotentialTerm) ‚Üí (x y : T.ChargeType) ‚Üí Decidable (x ‚äÜ y)
  | Œº, _, _ => instDecidableAnd
  | Œ≤, _, _ => instDecidableAnd
  | Œõ, _, _ => instDecidableAnd
  | W1, _, _ => instDecidableAnd
  | W2, _, _ => instDecidableAnd
  | W3, _, _ => instDecidableAnd
  | W4, _, _ => instDecidableAnd
  | K1, _, _ => instDecidableAnd
  | K2, _, _ => instDecidableAnd
  | topYukawa, _, _ => instDecidableAnd
  | bottomYukawa, _, _ => instDecidableAnd

@[simp, refl]
lemma subset_refl {T : PotentialTerm} (x : T.ChargeType) : x ‚äÜ x := by
  fin_cases T <;> simp [Subset]

@[trans]
lemma subset_trans {T : PotentialTerm} {x y z : T.ChargeType} (h1 : x ‚äÜ y) (h2 : y ‚äÜ z) :
    x ‚äÜ z := by
  fin_cases T <;>
    simp_all [Subset]

/-!

## The charges associated with the potential terms

-/

/-- The U(1) charges of each potential term given an element of the corresponding `ChargeType`.
  For example, for the term `ùõΩ·µ¢ 5ÃÑM‚Å±5Hu` and `Q5 = {0, 2}` and `qHu = 3` then
  the charges of this term would be `{-3, -1}`. -/
def charges : (T : PotentialTerm) ‚Üí T.ChargeType ‚Üí Multiset ‚Ñ§
  | Œº, (qHd, qHu) => (qHd.toFinset.product <| qHu.toFinset).val.map (fun x => x.1 - x.2)
  | Œ≤, (qHu, Q5) => (qHu.toFinset.product <| Q5).val.map (fun x => - x.1 + x.2)
  | Œõ, (Q5, Q10) => (Q5.product <| Q5.product <| Q10).val.map (fun x => x.1 + x.2.1 + x.2.2)
  | W1, (Q5, Q10) => (Q5.product <| Q10.product <| Q10.product <| Q10).val.map
    (fun x => x.1 + x.2.1 + x.2.2.1 + x.2.2.2)
  | W2, (qHd, Q10) => (qHd.toFinset.product <| Q10.product <| Q10.product <| Q10).val.map
    (fun x => x.1 + x.2.1 + x.2.2.1 + x.2.2.2)
  | W3, (qHu, Q5) => (qHu.toFinset.product <| Q5.product <| Q5).val.map
    (fun x => -x.1 - x.1 + x.2.1 + x.2.2)
  | W4, (qHd, qHu, Q5) => (qHd.toFinset.product <| qHu.toFinset.product <| Q5).val.map
    (fun x => x.1 - x.2.1 - x.2.1 + x.2.2)
  | K1, (Q5, Q10) => (Q5.product <| Q10.product <| Q10).val.map
    (fun x => - x.1 + x.2.1 + x.2.2)
  | K2, (qHd, qHu, Q10) => (qHd.toFinset.product <| qHu.toFinset.product <| Q10).val.map
    (fun x => x.1 + x.2.1 + x.2.2)
  | topYukawa, (qHu, Q10) => (qHu.toFinset.product <| Q10.product <| Q10).val.map
    (fun x => -x.1 + x.2.1 + x.2.2)
  | bottomYukawa, (qHd, Q5, Q10) => (qHd.toFinset.product <| Q5.product <| Q10).val.map
    (fun x => x.1 + x.2.1 + x.2.2)

lemma charges_of_subset (T : PotentialTerm) {x y : T.ChargeType} (h : x ‚äÜ y) :
    charges T x ‚äÜ charges T y := by
  match T, x, y with
  | Œº, (qHd, qHu), (qHd', qHu') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2‚ü©
  | Œ≤, (qHu, Q5), (qHu', Q5') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2‚ü©
  | Œõ, (Q5, Q10), (Q5', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.1 h'.2.1, h.2 h'.2.2‚ü©
  | W1, (Q5, Q10), (Q5', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3, q4) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product, Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2.1, h.2 h'.2.2.1, h.2 h'.2.2.2‚ü©
  | W2, (qHd, Q10), (qHd', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3, q4) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product, Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2.1, h.2 h'.2.2.1, h.2 h'.2.2.2‚ü©
  | W3, (qHu, Q5), (qHu', Q5') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2.1, h.2 h'.2.2‚ü©
  | W4, (qHd, qHu, Q5), (qHd', qHu', Q5') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2.1 h'.2.1, h.2.2 h'.2.2‚ü©
  | K1, (Q5, Q10), (Q5', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2.1, h.2 h'.2.2‚ü©
  | K2, (qHd, qHu, Q10), (qHd', qHu', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2.1 h'.2.1, h.2.2 h'.2.2‚ü©
  | topYukawa, (qHu, Q10), (qHu', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2 h'.2.1, h.2 h'.2.2‚ü©
  | bottomYukawa, (qHd, Q5, Q10), (qHd', Q5', Q10') =>
    simp only [charges, Finset.product_eq_sprod]
    simp only [Subset, instHasSubsetChargeType] at h
    apply Multiset.map_subset_map
    refine Multiset.subset_iff.mpr ?_
    intro (q1, q2, q3) h'
    rw [‚Üê Multiset.mem_toFinset, Finset.val_toFinset, Finset.mem_product,
      Finset.mem_product] at ‚ä¢ h'
    exact ‚ü®h.1 h'.1, h.2.1 h'.2.1, h.2.2 h'.2.2‚ü©

/-- Given a `I : CodimensionOneConfig`, and a potential term `PotentialTerm`, the
  possible finite set of elements of `T.ChargeType` which orginate from charges allowed by `I`. -/
def chargeSubsetFull (I : CodimensionOneConfig) (T : PotentialTerm) : Finset T.ChargeType :=
  let SqHd := {none} ‚à™ I.allowedBarFiveCharges.map ‚ü®Option.some, Option.some_injective ‚Ñ§‚ü©
  let SqHu := {none} ‚à™ I.allowedBarFiveCharges.map ‚ü®Option.some, Option.some_injective ‚Ñ§‚ü©
  let SQ5 := I.allowedBarFiveCharges.powerset
  let SQ10 := I.allowedTenCharges.powerset
  match T with
  | Œº => SqHd.product SqHu
  | K2 => SqHd.product (SqHu.product SQ10)
  | K1 => SQ5.product SQ10
  | W4 => SqHd.product (SqHu.product SQ5)
  | W3 => SqHu.product SQ5
  | W2 => SqHd.product SQ10
  | W1 => SQ5.product SQ10
  | Œõ => SQ5.product SQ10
  | Œ≤ => SqHu.product SQ5
  | topYukawa => SqHu.product SQ10
  | bottomYukawa => SqHd.product (SQ5.product SQ10)

/-!

## Excluded terms based on `U(1)` charges

The terms in the potential can be excluded based on the presences of `U(1)` charges
they carry.

-/

/-- Given a potential term `T` with an element of it's associated `ChargeType`, the proposition
  corresonding to there been no `zero` in the charges of that term. That is to say, it is excluded
  by the `U(1)` charges.

  For example, for the term `ùõΩ·µ¢ 5ÃÑM‚Å±5Hu` and `Q5 = {0, 2}` and `qHu = 3`
  the charges of this term are `{-3, -1}`, and this is excluded by the `U(1)` charges.
  Thus `IsExcluded Œ≤ (3, {0, 2})` would be `true`.
  -/
def IsExcluded (T : PotentialTerm) (x : T.ChargeType) : Prop :=
  0 ‚àâ T.charges x

/-!

### Decidability of `IsExcluded`

-/

/-- The decidability of `IsExcluded` for the potential terms. -/
instance : (T : PotentialTerm) ‚Üí DecidablePred T.IsExcluded
  | Œº => fun _ => instDecidableNot
  | Œ≤ => fun _ => instDecidableNot
  | Œõ => fun _ => instDecidableNot
  | W1 => fun _ => instDecidableNot
  | W2 => fun _ => instDecidableNot
  | W3 => fun _ => instDecidableNot
  | W4 => fun _ => instDecidableNot
  | K1 => fun _ =>instDecidableNot
  | K2 => fun _ => instDecidableNot
  | topYukawa => fun _ => instDecidableNot
  | bottomYukawa => fun _ => instDecidableNot

/-!

## Present terms based on `U(1)` charges

The terms in the potential can be present based on the presences of `U(1)` charges
they carry.

Of particular intrest is the presence of the top Yukawa term.

-/

/-- Given a potential term `T` with an element of it's associated `ChargeType`, the proposition
  corresonding to there been `zero` in the charges of that term. That is to say, it is present
  by the `U(1)` charges.

  For example, for the term `ùõΩ·µ¢ 5ÃÑM‚Å±5Hu` and `Q5 = {0, 2}` and `qHu = 2`
  the charges of this term are `{-2, 0}`, and this is excluded by the `U(1)` charges.
  Thus `IsPresent Œ≤ (3, {0, 2})` would be `true`.
  -/
def IsPresent (T : PotentialTerm) (x : T.ChargeType) : Prop :=
  0 ‚àà T.charges x

lemma not_isExcluded_iff_isPresent : (T : PotentialTerm) ‚Üí (x : T.ChargeType) ‚Üí
    ¬¨ T.IsExcluded x ‚Üî T.IsPresent x
  | Œº => fun (qHd, qHu) => by simp [IsExcluded, IsPresent]
  | Œ≤ => fun (qHu, Q5) => by simp [IsExcluded, IsPresent]
  | Œõ => fun (Q5, Q10) => by simp [IsExcluded, IsPresent]
  | W1 => fun (Q5, Q10) => by simp [IsExcluded, IsPresent]
  | W2 => fun (qHd, Q10) => by simp [IsExcluded, IsPresent]
  | W3 => fun (qHu, Q5) => by simp [IsExcluded, IsPresent]
  | W4 => fun (qHd, qHu, Q5) => by simp [IsExcluded, IsPresent]
  | K1 => fun (Q5, Q10) => by simp [IsExcluded, IsPresent]
  | K2 => fun (qHd, qHu, Q10) => by simp [IsExcluded, IsPresent]
  | topYukawa => fun (qHu, Q10) => by simp [IsExcluded, IsPresent]
  | bottomYukawa => fun (qHd, Q5, Q10) => by simp [IsExcluded, IsPresent]

/-- The decidability of `IsPresent` for the potential terms. -/
instance (T : PotentialTerm) : DecidablePred T.IsPresent := fun _ => Multiset.decidableMem _ _

lemma isPresent_of_subset (T : PotentialTerm) {y x : T.ChargeType}
    (h : y ‚äÜ x) (hy : T.IsPresent y) : T.IsPresent x := T.charges_of_subset h hy

end PotentialTerm

end SU5U1

end FTheory
